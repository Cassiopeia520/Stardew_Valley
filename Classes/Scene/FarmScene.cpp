#include "FarmScene.h"
#include "../Constant/Constant.h"
#include "../Bag/Bag.h"
#include "../MyButton/MyButton.h"
#include "../Control/Control.h"
#include "../DialogueBox/DialogueBox.h"
#include "../DateManage/Weather.h"

USING_NS_CC;

std::vector<Npc*> Farm::npcs;

Scene* Farm::createScene() {
	return Farm::create();
}

bool Farm::init() {
	if (!Scene::init()) {
		return false;
	}
	DateManage* dateManage = DateManage::getInstance();

	FarmMap* farmMap = FarmMap::getInstance();
	if (!farmMap->init("Maps/farmSpring11_28/farmMap.tmx")) {
		return false;
	}

	currentWeatherSystem = nullptr;
	backgroundMask = nullptr;

	// 启动一个定时器，每秒调用一次 updateDate 方法
	schedule([this, dateManage,farmMap](float deltaTime) {
		dateManage->updateDate();
		farmMap->farmMapUpdateByTime();
		this->updateWeather(dateManage->getCurrentWeather());
		}, 1.0f, "update_date_key");

	const auto farmMapSize = farmMap->getMapSize();
	farmMap->setPosition(WINSIZE.width / 2 -farmMapSize.width / 2, WINSIZE.height / 2 -farmMapSize.height / 2);
	this->addChild(farmMap, 0);

	// 加入两个NPC
	Npc* wizard = Npc::create(WIZARD_INFO);
	Npc* cleaner = Npc::create(CLEANER_INFO);
	npcs.push_back(cleaner);
	npcs.push_back(wizard);
	farmMap->npcInit(Vec2(WIZARD_X, WIZARD_Y), wizard);
	farmMap->npcInit(Vec2(CLEANER_X, CLEANER_Y), cleaner);
	DialogueBox::isDialogueVisible = false;

	// 玩家
	auto player = Player::getInstance();
	player->setPosition(WINSIZE.width / 2, WINSIZE.height / 2); // 玩家初始位置在屏幕中央
	this->addChild(player, 3);

	// 玩家名字
	auto nameLabel = Label::createWithTTF(player->getPlayerName() + "'s farm", "fonts/Marker Felt.ttf", 24);
	if (nameLabel) {
		nameLabel->setPosition(Vec2(WINSIZE.width / 2, WINSIZE.height - 50));
		this->addChild(nameLabel, 4);
	}

	// 背包
	Bag* bag = Bag::getInstance();
	if (bag) {
		this->addChild(bag, 4);
	}

	// 退出按钮
	auto closeButton = MyButton::create(ResPath::CLOSE_BUTTON_NORMAL, ResPath::CLOSE_BUTTON_HOVER);
	if (closeButton) {
		const auto closeButtonSize = closeButton->getContentSize();
		closeButton->setPosition(Vec2(closeButtonSize.width / 2, WINSIZE.height - closeButtonSize.height / 2)); // 放在左上角
		this->addChild(closeButton, 4);
		closeButton->addClickEventListener(CC_CALLBACK_1(Farm::closeButtonClicked, this));
	}

	Control* control = Control::create();
	this->addChild(control, 4);

	 // 创建显示日期的标签
	 if (dateManage->dateLabel) {
		 dateManage->dateLabel->setPosition(Vec2(WINSIZE.width - 100, WINSIZE.height - 40));  // 右上角位置
		 this->addChild(dateManage->dateLabel, 5);
	 }
	return true;
}

// 农场场景天气的变化
void Farm::updateWeather(Weather weather) {
	 // 移除现有的天气粒子系统
    if (currentWeatherSystem) {
        this->removeChild(currentWeatherSystem);
        currentWeatherSystem = nullptr;
    }

    // 根据天气选择不同的粒子系统
    switch (weather) {
        case Weather::Sunny:
            // 晴天：可以使用光点效果或简单的晴天背景
            currentWeatherSystem = ParticleSun::create();
			currentWeatherSystem->setPosition(WINSIZE.width - SUN_OFFSET, WINSIZE.height - SUN_OFFSET); // 右上角
            currentWeatherSystem->setStartColor(Color4F(1.0f, 0.9f, 0.5f, 1.0f));	// 太阳的颜色
            currentWeatherSystem->setEndColor(Color4F(1.0f, 0.8f, 0.3f, 0.8f));		// 太阳渐变的颜色
            currentWeatherSystem->setSpeed(0);										// 无风
            currentWeatherSystem->setLife(0);										// 不需要生死周期，只是装饰效果
			
			// 删除背景遮罩
			if (backgroundMask) {
				this->removeChild(backgroundMask);
				backgroundMask = nullptr;
			}
            break;
        
        case Weather::LightRain:
            // 小雨：设置小雨的粒子系统
            currentWeatherSystem = ParticleRain::create();
			currentWeatherSystem->setPosition(WINSIZE.width / 2, WINSIZE.height);	// 屏幕中心
            currentWeatherSystem->setStartColor(Color4F(0.4f, 0.4f, 1.0f, 1.0f));	// 浅蓝色雨滴
            currentWeatherSystem->setEndColor(Color4F(0.2f, 0.2f, 0.8f, 0.8f));		// 雨滴渐变
            currentWeatherSystem->setSpeed(500);									// 雨滴速度
            currentWeatherSystem->setSpeedVar(50);									// 增加一些速度的随机性
            currentWeatherSystem->setStartSize(10.0f);								// 增加雨滴的大小
            currentWeatherSystem->setEndSize(5.0f);									// 渐小
			
			// 添加背景遮罩
			if (!backgroundMask) {
				backgroundMask = LayerColor::create(Color4B(0, 0, 0, 32));			// 半透明黑色
				this->addChild(backgroundMask, 99);									// 添加到场景，层级低于粒子效果
			}
            break;
        
        case Weather::HeavyRain:
            // 大雨：设置更大的速度和更多的雨滴
            
			currentWeatherSystem = ParticleRain::create();
			currentWeatherSystem->setPosition(WINSIZE.width / 2, WINSIZE.height);	// 屏幕中心
            currentWeatherSystem->setStartColor(Color4F(0.4f, 0.4f, 1.0f, 1.0f));	// 蓝色雨滴
            currentWeatherSystem->setEndColor(Color4F(0.2f, 0.2f, 0.8f, 0.8f));		// 渐变
			currentWeatherSystem->setTotalParticles(600);							// 增加粒子的数量，更多的雨滴
            currentWeatherSystem->setSpeed(800);									// 增加速度
            currentWeatherSystem->setSpeedVar(100);									// 增加速度的随机性
            currentWeatherSystem->setStartSize(15.0f);								// 更大的雨滴
            currentWeatherSystem->setEndSize(10.0f);								// 渐小
			// 添加背景遮罩
			if (!backgroundMask) {
				backgroundMask = LayerColor::create(Color4B(0, 0, 0, 64));			// 更深的半透明黑色
				this->addChild(backgroundMask, 99);									// 添加到场景，层级低于粒子效果
			}
            break;
        
        case Weather::Snowy:
            // 雪天：雪花的粒子系统
            currentWeatherSystem = ParticleSnow::create();
			currentWeatherSystem->setPosition(WINSIZE.width / 2, WINSIZE.height);	// 屏幕中心
            currentWeatherSystem->setStartColor(Color4F(1.0f, 1.0f, 1.0f, 1.0f));	// 白色雪花
            currentWeatherSystem->setEndColor(Color4F(0.8f, 0.8f, 0.8f, 0.8f));		// 渐变为透明
            currentWeatherSystem->setSpeed(100);									// 轻柔的雪花速度
            currentWeatherSystem->setSpeedVar(20);									// 稍微有点随机性
            currentWeatherSystem->setStartSize(10.0f);								// 中等大小雪花
            currentWeatherSystem->setEndSize(5.0f);									// 渐小
            break;
    }

    // 添加粒子系统到场景
    if (currentWeatherSystem) {
        this->addChild(currentWeatherSystem, 100);
    }
}
// 关闭按钮的回调函数
void Farm::closeButtonClicked(Ref* pSender) {
	Director::getInstance()->popScene();
}